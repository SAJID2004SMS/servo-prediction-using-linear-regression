

# SERVO PREDICTION USING LINEAR REGRESSION 
# IMPORT LIBRARIES
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.pyplot as plt

# IMPORT CSV AS DATAFRAME
df = pd.read_csv(r'https://github.com/YBI-Foundation/Dataset/raw/main/Servo%20Mechanism.csv')

# EXPLORE THE DATA
print("First 5 rows of the dataset:")
print(df.head())

print("\nDataframe Info:")
df.info()

print("\nSummary Statistics:")
print(df.describe())

print("\nColumn Names:")
print(df.columns)

print("\nShape of the Dataframe:")
print(df.shape)

print("\nValue Counts for Categorical Variables:")
print("Motor:\n", df['Motor'].value_counts())
print("Screw:\n", df['Screw'].value_counts())

# ENCODE CATEGORICAL FEATURES
df.replace({'Motor': {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4}}, inplace=True)
df.replace({'Screw': {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4}}, inplace=True)

# DEFINE y (DEPENDENT VARIABLE) AND X (INDEPENDENT VARIABLES)
y = df['Class']
X = df[['Motor', 'Screw', 'Pgain', 'Vgain']]

# TRAIN-TEST SPLIT
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=2529)

print("\nTraining and Testing Data Shapes:")
print("X_train:", X_train.shape, "X_test:", X_test.shape)
print("y_train:", y_train.shape, "y_test:", y_test.shape)

# TRAIN THE LINEAR REGRESSION MODEL
lr = LinearRegression()
lr.fit(X_train, y_train)

# PREDICT USING THE MODEL
y_pred = lr.predict(X_test)

# EVALUATE THE MODEL
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("\nModel Evaluation Metrics:")
print(f"Mean Squared Error: {mse}")
print(f"Mean Absolute Error: {mae}")
print(f"R-squared: {r2}")

# VISUALIZE ACTUAL VS PREDICTED RESULTS
plt.scatter(y_test, y_pred, alpha=0.7, color="b")
plt.xlabel("Actual")
plt.ylabel("Predicted")
plt.title("Actual Vs Predicted")
plt.show()

# FUTURE PREDICTIONS
X_new = df.sample(1)  # Randomly sample one row
print("\nRandomly Sampled Data for Prediction:")
print(X_new)

X_new = X_new.drop('Class', axis=1)  # Drop the dependent variable for prediction
y_pred_new = lr.predict(X_new)

print("\nPredicted Value for the New Sample:")
print(y_pred_new)